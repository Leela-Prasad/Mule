<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <flow name="getFlightFormFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/flights" allowedMethods="GET" doc:name="HTTP"/>
        <parse-template location="FlightFinder.html" doc:name="Parse Template"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="getAllFlightsFlow">
        <poll doc:name="">
            <scatter-gather doc:name="Scatter-Gather">
                <flow-ref name="getUnitedFlightsFlow" doc:name="getUnitedFlightsFlow"/>
                <flow-ref name="getAmericanFlightsFlow" doc:name="getAmericanFlightsFlow"/>
                <flow-ref name="getDeltaFlightsFlow" doc:name="getDeltaFlightsFlow"/>
            </scatter-gather>
        </poll>
        <combine-collections-transformer doc:name="Combine Collections"/>
    </flow>
    <flow name="getFlightsFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/flights" allowedMethods="POST" doc:name="HTTP"/>
        <dw:transform-message doc:name="Set payload and destination flowVar">
            <dw:input-payload doc:sample="sample_data/json.json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
            <dw:set-variable variableName="destination"><![CDATA[%dw 1.0
%output application/java
---
payload.destination]]></dw:set-variable>
            <dw:set-variable variableName="json"><![CDATA[%dw 1.0
%output application/json
---
data: {
	hub: "MUA",
	code: payload.destination,
	airline: payload.airline
}]]></dw:set-variable>
            <dw:set-variable variableName="xml"><![CDATA[%dw 1.0
%output application/xml
---
data: {
	hub: "MUA",
	flight @(airline: payload.airline): {
		code: payload.destination
	}	
}]]></dw:set-variable>
        </dw:transform-message>
        <choice doc:name="Choice">
            <when expression="#[payload.airline==&quot;all&quot;]">
                <flow-ref name="getAllFlightsFlow" doc:name="getAllFlightsFlow"/>
            </when>
            <when expression="#[payload.airline==&quot;american&quot;]">
                <flow-ref name="getAmericanFlightsFlow" doc:name="getAmericanFlightsFlow"/>
            </when>
            <when expression="#[payload.airline==&quot;delta&quot;]">
                <flow-ref name="getDeltaFlightsFlow" doc:name="getDeltaFlightsFlow"/>
            </when>
            <when expression="#[payload.airline==&quot;united&quot;]">
                <flow-ref name="getUnitedFlightsFlow" doc:name="getUnitedFlightsFlow"/>
            </when>
            <otherwise>
                <logger message="Other flights are NOT supported" level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="getAmericanFlightsFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/american" allowedMethods="GET" doc:name="HTTP"/>
        <set-variable variableName="destination" value="flowVars.destination" doc:name="destination"/>
        <db:select config-ref="Training_MySQL_Configuration" doc:name="American DB Request">
            <db:parameterized-query><![CDATA[SELECT * FROM flights WHERE toAirport = #[flowVars.destination]]]></db:parameterized-query>
        </db:select>
        <dw:transform-message doc:name="Java to Java">
            <dw:input-payload doc:sample="sample_data/list_map.dwl"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	airlineName: $.airlineName,
	departureDate: $.takeOffDate,
	destination: $.toAirport,
	emptySeats: $.seatsAvailable as :number unless $.seatsAvailable=="none" otherwise 0,
	flightCode: $.code1 ++ $.code2,
	origination: $.fromAirport,
	planeType: $.planeType,
	price: $.price as :number {format: "###.##"}
}]]></dw:set-payload>
        </dw:transform-message>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="getDeltaFlightsFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/delta" doc:name="HTTP" allowedMethods="GET"/>
        <set-variable variableName="destination" value="flowVars.destination" doc:name="destination"/>
        <dw:transform-message doc:name="Pass Destination">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://soap.training.mulesoft.com/
---
{
	ns0#findFlight: {
		destination: flowVars.destination
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <ws:consumer config-ref="Delta_Web_Service_Consumer" operation="findFlight" doc:name="Delta SOAP Request" />
        <dw:transform-message metadata:id="e9786e7f-c585-4778-8903-7ee5ef654ccb" doc:name="XML to Java">
            <dw:input-payload doc:sample="sample_data/listAllFlightsResponse_3.xml"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%namespace ns0 http://soap.training.mulesoft.com/
---
payload.ns0#findFlightResponse.*return map {
	airlineName: $.airlineName,
	departureDate: $.departureDate,
	destination: $.destination,
	emptySeats: $.emptySeats as :number,
	flightCode: $.code,
	origination: $.origin,
	planeType: $.planeType replace /(Boing)/ with "Boeing",
	price: $.price as :number {format: "###.##"}
}]]></dw:set-payload>
        </dw:transform-message>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
    </flow>
    <flow name="getUnitedFlightsFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/united" doc:name="HTTP" allowedMethods="GET"/>
        <set-variable variableName="destination" value="flowVars.destination" doc:name="destination"/>
        <http:request config-ref="United_REST_Request_Configuration" path="/{destination}" method="GET" doc:name="United REST Request" metadata:id="8c54741c-8f75-4cd2-8cc5-179e248dc7b7">
            <http:request-builder>
                <http:uri-param paramName="destination" value="#[flowVars.destination]"/>
            </http:request-builder>
        </http:request>
        <dw:transform-message doc:name="JSON to Java">
            <dw:input-payload doc:sample="schemas-and-examples/united-flights-example.json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload.flights map {
	airlineName: $.airlineName,
	departureDate: $.departureDate,
	destination: $.destination,
	emptySeats: $.emptySeats as :number,
	flightCode: $.code,
	origination: $.origin,
	planeType: $.planeType,
	price: $.price as :number {format: "###.##"}
}]]></dw:set-payload>
        </dw:transform-message>
        <logger level="INFO" doc:name="Logger"/>
    </flow>
</mule>
